@using Semprg_BlazorIntroductory.Contracts
<li>
    <ul>
        <li>
            <span class='story__node__content'>@Node.Content</span>
            @if (chosenAction is null)
            {
                <div class='line__what__happens__next'>What happens next?</div>
            }
            <ul>
                @if (chosenAction is null) //No action chosen yet
                {
                    @foreach (var possibleAction in possibleActions.StoryActions) //Story action options
                    {
                        <li>
                            <button class='story__action__content' @onclick="async () => await HandleActionClick(possibleAction)">@possibleAction.Content</button>
                        </li>
                    }
                    @if (!HasReachedMaxActions) //Continue the story button
                    {
                        <li>
                            <button class='story__continue__button' @onclick="HandleToggleAddActionClick">@(addActionOpen ? "-" : "Continue the story!")</button>
                            @if (addActionOpen)
                            {
                                <input @bind="addActionContent" type='text' class='story__action__content' placeholder='What do you do?'/>
                                <ul>
                                    <li>
                                        <input @bind="addActionConsequenceContent" type='text' class='story__node__content' placeholder='What happens next?'/>
                                    </li>
                                </ul>
                                <button @onclick="async () => await HandleAddActionClick()">Add</button>
                            }
                        </li>
                    }
                }
                else //We chose an action
                {
                    <ul>
                        <li>
                            <span class='story__action__content'>@chosenAction.Value.Content</span>
                            <ul>
                                <StoryTreeNode Node='chosenActionConsequence!.Value'/>
                            </ul>
                        </li>
                    </ul>
                }
            </ul>
        </li>
    </ul>
</li>

@code {
    [Inject] public required HttpClient HttpClient { get; set; }

    // [Parameter] public required StoryActionResponse Action { get; set; }
    [Parameter] public required StoryNodeResponse Node { get; set; }
    private bool HasReachedMaxActions => possibleActions.StoryActions.Count >= StoryNodeResponse.MaxNonRootActionsPerNode && Node.NodeId != 1; //This is horrible ;-D

    // private bool actionChosen = false;
    private StoryActionsResponse possibleActions = new(new());

    private bool addActionOpen = false;
    private string addActionContent = "";
    private string addActionConsequenceContent = "";

    private StoryActionResponse? chosenAction = null;
    private StoryNodeResponse? chosenActionConsequence = null;

    private async Task HandleActionClick(StoryActionResponse action)
    {
        chosenAction = action;
        chosenActionConsequence = action.Consequence;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        possibleActions = await HttpClient.GetFromJsonAsync<StoryActionsResponse>($"/story-actions?ofNodeId={Node.NodeId}");

        StateHasChanged();
    }

    private void HandleToggleAddActionClick()
    {
        addActionOpen = !addActionOpen;
        StateHasChanged();
    }
    private async Task HandleAddActionClick()
    {
        var request = new AddStoryActionRequest(Node.NodeId, addActionContent, addActionConsequenceContent);
        var response = await HttpClient.PostAsJsonAsync("/add-action", request);

        response.EnsureSuccessStatusCode();

        var addedAction = await response.Content.ReadFromJsonAsync<StoryActionResponse>();
        possibleActions.StoryActions.Add(addedAction);

        addActionContent = "";
        addActionConsequenceContent = "";
        addActionOpen = false;

        StateHasChanged();
    }

    public async Task RestartAsync()
    {
        await OnInitializedAsync();

        chosenAction = null;
        chosenActionConsequence = null;
        StateHasChanged();
    }
}